  Introduction
- - - - - - - - - 
   The for loop is an essential programming functionality that goes through a list of elements. For each of those elements, the for loop performs a set of commands. The command helps repeat processes until a terminating condition.
   Whether you're going through an array of numbers or renaming files, for loops in Bash scripts provide a convenient way to list items automatically.

 Bash Script for Loop
- - - - - - - - - - - -
 Use the for loop to iterate through a list of items to perform the instructed commands.

Syntax
- - - -

	for <element> in <list>
	do
		<commands>
	done

Note: The element, list, and commands parsed through the loop vary depending on the use case.

Examples:
- - - - - -

Individual Items: Iterate through a series of given elements and print each with the following syntax;

Sysadmin@localhost: ~$ vi forLoop.sh

	#! /bin/bash
	# For loop with individual numbers
	for i in 1 2 3 4 5;
	do
		echo "Element $i"
	done

Sysadmin@localhost: ~$ chmod u+x forLoop.sh
Sysadmin@localhost: ~$ ./forLoop.sh

 Range
- - - - 
 Instead of writing a list of individual elements, use the range syntax the first and last element;

Sysadmin@localhost: ~$ vi rangeLoop.sh

	#! /bin/bash

	# For loop with range number.
	for i in {0..5};
	do
		echo "Element $i"
	done
Sysadmin@localhost: ~$ vi rangeLetterLoop.sh

	#! /bin/bash
	# For loop with letter range.
	for i in {a..f};
	do
		echo "Element $i"
	done

Sysadmin@localhost: ~$ vi rangeReverseLoop.sh

	#! /bin/bash
	# For loop with reverse range
	for in {5..0};
	do
		echo "Element $i"
	done

 Range with Increment
- - - - - - - - - - - -
 Use range syntax and add the step value to go through the range in intervals.

#! /bin/bash
# For loop with range increment numbers
	for i in {0..20..2};
	do
		echo "Element $i"
	done

#! /bin/bash
# For loop with reverse range increment numbers
	for i in {10..0..2};
	do
		echo "Element $i"
	done

 The Seq Command
- - - - - - - - - -
 The seq command generates a number sequence. Parse the sequence in the Bash script for loop as a command to generate a list.

	#! /bin/bash
	# For loop with seq command
	for i in $(seq 0 2 10);
	do
		echo "Element $i"
	done
 The output prints each element generated by the seq command.

 The seq command is a historical command and not a recommended way to generated a sequence. The curly braces built-in methods are preferable and faster.

 C-Style
- - - - - -
 Bash scripts allow C-style three parameter for loop control expressions. Add the expression between double parentheses as follows:

Sysadmin@localhost: ~$ vi cystleLoop.sh

	#!/bin/bash
	# For loop C-style
	for (( i=0; i<=5; i++ ))
	do
		echo "Element $i"
	done

 The expression consists of:
* The initializer (i=0) determines the number where the loop starts counting.
* Stop condition (i<=5) indicates when the loop exits.
* Step (i++) increments the value of i until the stop condition.

 Separate each condition with a semicolon (;). Adjust the three values as needed for your use cases.

Sysadmin@localhost: ~$ ./cystleLoop.sh

Note: The value increases by the step amount, up to stop condition.

 Infinite Loops
- - - - - - - - -
 Infinite for loops do not have a condition set to terminate the loop. The program runs endlessly because the end condition does not exist or never fulfills.

To generate an infinite for loop, add the following code to a Bash script:

Sysadmin@localhost: ~$ vi infiniteLoop.sh

	#! /bin/bash
	# Infinite for loop
	for(( ; ; ));
	do
		echo "CTRL+C to exit"
	done

Sysadmin@localhost: ~$ ./infiniteLoop.sh

To terminate the script execution, press CTRL+C.
Note: Infinite loops are helpful when a program runs until a particular condition fulfills.

 Break Clause
- - - - - - - -
 The break clause ends the current loop and helps exit the for loop early. This behaviour allows exiting the loop before meeting a stated condition.

To demonstrate, add the following code to Bash script;

	#! /bin/bash
	# Infinite for loop with break.
	i=0
	for (( ; ; ));
	do
		echo "Iteration: ${i}"
		(( i++ ))
		if [[ i -gt 10 ]];
		then
			break;
		fi
	done

	echo "Done!"

 The example shows how to exit an infinite for loop using break. The Bash if statement helps check the value for each integer and provides the break condition. This terminates the script when an integer reaches the value ten.

 Continue Clause
- - - - - - - - - -
 The continue statement ends the current loop iteration. The program continues the loop, starting with the following iteration. To illustrate, add the following code to a Bash script to see how the continue statement works in a for loop.

	#! /bin/bash
	# For loop with continuw statement
	for i in {1..100};
	do
		if [[ $i%11 -ne 0 ]];
		then
			continue
		fi
		echo $i
	done

Note: The code above checks numbers between one and one hundred and prints only numbers divisible by eleven. The conditional if statement checks for divisibility, while the continuw statement skips any numbers which have a remainder when divided by eleven.

 Arrays
- - - - - 
 Arrays store a list of elements. The for loop provides a method to go through arrays by element.

	#! /bin/bash
	# For loop with array.
	arr=(1 2 3 4 5)
	for i in ${arr[@]};
	do
		echo "Element $i"
	done

 The output prints each element stored in the array from first to last. The Bash for loop is the only method to iterate through individual array elements.

 Working Array Indices
- - - - - - - - - - - - -
 When working with arrays, each element has an index.

List through an array's indices with the following code:

	#! /bin/bash
	# For loop with array indices
	arr=(1 2 3 4 5)
	for in ${!arr[@]};
	do
		echo "Array indices $i"
	done

Element indexing starts at zero. Therefore, the first element has an index zero. The output prints numbers from sero to four for an array with five elements.

 Nested Loops
- - - - - - - - -
 To loop through or generate multi-dimensional arrays, use nested for loops.
As an example, generate decimal values from zero to three using nested loops:

	#! /bin/bash
	# Nested for loop
	for (( i=0; i<=2; i++ ));
	do
		for (( j=0; j<=9; j++ ));
		do
			echo  -n " $i.$j "
		done
		echo ""
	done

The code above explained as follows;
* Line 1 starts the for loop at zero, increments by one, and ends at 2, inclusive.
* Line 3 starts the nested for loop at zero. The value increments by 1 and ends at 9 inclusively.
* Line 5 prints the values from the for loops. The nested for loops through all numbers three times, once for each outer loop value.

The outputs prints each number combination to the console and enters a newline when the outer loop finishes one iteration.

 Strings in Bash
- - - - - - - - - -
 To loop through words in a string, store the string in a variable. Then, parse the variable to a for loop as a list.

	#! /bin/bash
	# For loop with string
	mystrs="I am a string"
	for i in ${mystrs};
	do
		echo "String $i"
	done

 The loop iterates through the string, with each word being a separate element.The output prints individual words from the string to the console.

 Files in Bash
- - - - - - - - -
 The for loop combined with proximity searches helps list or alter files that meet a specific condition.

For example, list all Bash scripts in the current directory with a for loop:

	#! /bin/bash
	# For loop with files.
	for f in *.sh;
	do
		echo $f
	done

The Script above searches through the current directory and lists all files with the .sh extension. Loop through files or directories to automatically rename or change permissions for multiple elements at once.

 Command Substitution
- - - - - - - - - - - - -
 The for loop accepts command substitution as a list of elements to iterate through. The next example demonstrates how to write a for loop with command substitution:

Sysadmin@localhost: ~$ echo "This\n is\n a\n sample\n text" > list.txt

	#! /bin/bash
	# For loop with command substitution

	list=`cat list.txt`

	#Alternatively, use $(cat list.txt)
	for i in $list;
	do
		echo $i
	done

The Bash comment offers an alternative syntax for command substitution. The code reads the contents of the list.txt file using the cat command and saves the information to a variable list.

Use Case for the command substitution method to rename files from a list names saved in a text file.

 Command Line Arguments
- - - - - - - - - - - - -
Use the for loop to iterate through command line arguments.

Sysadmin@localhost: ~$ vi cmdargsLoop.sh

#! /bin/bash
# For loop in expecting command line arguments
	for i in $@;
	do
		echo $i
	done

Provide the command line arguments when you run the Bash Script.
Sysadmin@localhost: ~$ ./cmdargsLoop.sh 1 2 3 4 5

The $@ substitutes each command line argument into the for loop.



